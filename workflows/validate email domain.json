{"createdAt":"2024-12-18T00:59:16.690Z","updatedAt":"2024-12-18T19:16:06.000Z","id":"8PavhprkYxy9vvTZ","name":"validate email domain","active":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-220,0],"id":"83d0cc2e-9953-4351-9d0c-a23675c8286d","name":"When clicking ‘Test workflow’"},{"parameters":{"mode":"runOnceForEachItem","jsCode":"function getDomainFromEmail(email) {\n    // Split the email address at '@' and return the part after '@'\n    const domain = email.split('@')[1];\n    return domain;\n}\n\n//get data \nconst email = $json.emails;\nconst domain = getDomainFromEmail(email);\nreturn {json: {domain: domain, email:email}}\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[60,0],"id":"ca31c846-9ee7-4701-bb50-e87cedf50d88","name":"Code"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[440,0],"id":"4b37762d-9f48-4d63-970b-0c06668ceb32","name":"Loop Over Items","onError":"continueErrorOutput"},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"hostname","renameField":true,"outputFieldName":"gooddomains"}]},"options":{"includeBinaries":false}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[760,-200],"id":"f0032616-6a7f-4256-a940-b9173c7af930","name":"Aggregate domain list","onError":"continueRegularOutput"},{"parameters":{"url":"=https://networkcalc.com/api/dns/lookup/{{$json.domain}}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[700,0],"id":"b0d71b17-ca9f-496b-a93a-bd979e28bf5f","name":"HTTP Request","onError":"continueRegularOutput"},{"parameters":{"mode":"combine","combineBy":"combineAll","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[960,-340],"id":"269f6fbf-f59c-437c-ac71-5e84d7e7f19e","name":"Merge"},{"parameters":{},"type":"n8n-nodes-base.noOp","typeVersion":1,"position":[1640,-340],"id":"bd224359-7b45-4be7-ae70-7b452732533b","name":"No Operation, do nothing"},{"parameters":{"jsCode":"// Loop over input items and add a new field called 'myNewField' to the JSON of each one\n\n\nconst items = $input.all(); \n\nconst processedData = items\n  .filter(item => item.json.emails !== null) // Filter out items with null emails\n  .map(item => {\n    console.log(\"email:\" + item.json.emails);\n\n    // Return the email in the desired format\n    return {\n      json: {\n        emails: item.json.emails,\n      }\n    };\n  });\n\nreturn processedData; \n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1380,-340],"id":"2cb43ed7-c3fe-41da-8cf3-c2bc8ac7b645","name":"filter to only good emails"},{"parameters":{"mode":"runOnceForEachItem","jsCode":"// Add a new field called 'myNewField' to the JSON of the item\n// Function to filter data based on good-domains array\n//function filterByGoodDomains(data) {\n //   return data.filter(record => record[\"gooddomains\"].includes(record.domain));\n//}\n/*\n// run this once for all items \n//const jsonData = $input.item.json;\nconsole.log(\"generate end data set\");\n\n// const data =$input.all();\n\nconsole.log(\"data:\" + data );\n\n\n// Function to filter valid emails using a for loop\nfunction filterValidEmailsWithForLoop(data) {\n    const validEmails = [];\n    \n    for (let i = 0; i < data.length; i++) {\n        const record = data[i];\n        //console.log(\"record:\" + record);\n        console.log(\"record: \"+ JSON.parse(record));\n        console.log(\"record domain \" + record.domain);\n        console.log(\"record email \" + record.email);\n        console.log(\"record gooddomains \" + record.gooddomains);\n      \n        const gooddomains=record.gooddomains;\n        const domain=record.domain;\n        \n        // Check if the domain is in the gooddomains array\n        if (gooddomains.includes(domain)) {\n            validEmails.push(record.email); // Add the email to the result array\n        }\n    }\n    \n    return validEmails;\n}\n\n// Get valid emails\nconst validEmails = filterValidEmailsWithForLoop(data);\nconsole.log(\"Valid Emails:\", validEmails);\n\nreturn vaidEmails;\n*/\n\n// when run once per each item\n// Get filtered result\nconst domain = $json.domain;\nconst email = $json.email;\nconst gooddomains = $json.gooddomains\n\nconsole.log(\"domain:\" + domain);\nconsole.log(\"email:\" + email);\nconsole.log(\"gooddomains:\" + gooddomains);\n\n\n//const data = $json;\n//console.log(\"data:\" + data);\n//const filteredData = filterByGoodDomains($json );\n\nif (gooddomains.includes(domain)) {\n       return {json: {emails: email }}; // Return the email if the domain is in gooddomains\n }else \n{\n  return {json: {emails: null }};\n}\n\n/*\n// Function to check and return email if domain is in gooddomains\nfunction getEmailIfDomainIsGood(domain,email,gooddomains) {\n    if (gooddomains.includes(domain)) {\n        return email; // Return the email if the domain is in gooddomains\n    }\n    return null; // Return null if the domain is not in gooddomains\n}\n\n// Get the result\nconst result = getEmailIfDomainIsGood(domain,email,gooddomains);\nconsole.log(\"Result:\", result);\nreturn {json: {emails: result }}\n*/\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1180,-340],"id":"fafa6c34-6b10-438c-8932-6a72e43be020","name":"Get final emails list"}],"connections":{"When clicking ‘Test workflow’":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"Loop Over Items","type":"main","index":0},{"node":"Merge","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"Aggregate domain list","type":"main","index":0}],[{"node":"HTTP Request","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Aggregate domain list":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Merge":{"main":[[{"node":"Get final emails list","type":"main","index":0}]]},"No Operation, do nothing":{"main":[[]]},"filter to only good emails":{"main":[[{"node":"No Operation, do nothing","type":"main","index":0}]]},"Get final emails list":{"main":[[{"node":"filter to only good emails","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"When clicking ‘Test workflow’":[{"json":{"emails":"revbooksnyc@yahoo.com"}},{"json":{"emails":"info@albertine.comssdfs"}},{"json":{"emails":"letters@kitchenartsandletters.com"}},{"json":{"emails":"letters@kinartsandletters.com"}}]},"versionId":"c986813a-ae2e-4c1c-8fe8-2e649b8f8f7c","triggerCount":0,"tags":[{"createdAt":"2024-12-17T23:37:09.525Z","updatedAt":"2024-12-17T23:37:09.525Z","id":"2kf7Br3LqlX3dBlY","name":"test"},{"createdAt":"2024-12-17T23:36:55.980Z","updatedAt":"2024-12-17T23:36:55.980Z","id":"b3J54jyUwdelZgcI","name":"emails"}]}